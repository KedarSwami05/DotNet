// Create the following classes
// Employee
//    Prop	
// 	string Name -> no blanks
// 	int EmpNo -> readonly, autogenerated
// 	short DeptNo -> > 0
// 	abstract decimal Basic 
//    Methods
// 	abstract decimal CalcNetSalary()


// Manager : Employee
//    Prop
// 	string Designation -> cant be blank
	

// GeneralManager : Manager
//    Prop
//  	string Perks -> no validations

// CEO : Employee
//       Make CalcNetSalary() a sealed method

// NOTE : Overloaded constructors in all classes calling their base class constructor 
// All classes must implement IDbFunctions interface
// All classes to override the abstract members defined in the base class(Employee). Basic property to have different validation in different classes.
// CalcNetSalary() to have different validation in different classes.


====================================================================


using Task3;

namespace Task3
{
    public class Program
    {
        static void Main()
        {

            Manager m = new Manager("Patil", 1);
            m.Designation = "Manager";
            m.Basic = 50000;


            Console.WriteLine("Name: " + m.Name + ", EmpNo: " + m.EmpNo + "," +
                        " DeptNo: " + m.Deptno + ", Designation: " + m.Designation + ", " +
                        "Basic: " + m.Basic);



            m.Insert();
            m.Update();
            m.Delete();

            GeneralManager gm = new GeneralManager("Krish", 2);
            gm.Designation = "HR";
            gm.Basic = 75000;
            gm.Perks = "Bike";
            Console.WriteLine("Name: " + gm.Name + ", EmpNo: " + gm.EmpNo + "," +
               " DeptNo: " + gm.Deptno + ", Designation: " + gm.Designation + ", " +
               "Basic: " + gm.Basic + ", Perks: " + gm.Perks);

            gm.Insert();
            gm.Update();
            gm.Delete();


            CEO ceo = new CEO("Kedar", 3);
            ceo.Basic = 150000;

            Console.WriteLine("Name: " + ceo.Name + ", EmpNo: " + ceo.EmpNo + "," +
               " DeptNo: " + ceo.Deptno + ", Basic: " + ceo.Basic);


            ceo.Insert();
            ceo.Update();
            ceo.Delete();
        }
    }


    public interface IDbFunction //interface meance all methods are abstract no body
    {
        void Insert();
        void Update();
        void Delete();
    }

    public abstract class Employee : IDbFunction  // Employee class are abstract and
                                                  // derived for interface idfunction
    {

        public Employee(string name, short deptno)
        {
            this.Name = name;
            this.Deptno = deptno;
            this.empNo = counter++;
        }
        private string name;

        public string Name
        {
            set
            {
                if (value != "")
                    name = value;
                else
                    Console.WriteLine("Invalid Value");
            }
            get
            {
                return name;
            }
        }

        private int empNo;


        private static int counter = 0;
        public int EmpNo
        {

            get
            {
                return empNo;
            }

        }


        private short deptno;

        public short Deptno
        {
            set
            {
                if (value > 0)
                    deptno = value;
                else
                    Console.WriteLine("Invalid DeptNo ");
            }
            get
            {
                return deptno;
            }
        }

        public abstract decimal Basic { 
            get;
            set; 
        }

        public abstract decimal CalcNetSalaey();


        public abstract void Insert();

        public abstract void Update();

        public abstract void Delete();

    }
    public class Manager : Employee
    {
        public Manager(string name, short deptno) : base(name, deptno)
        {

        }
        private string designation;
        public string Designation
        {
            set
            {
                if (value != "")
                    designation = value;
                else
                    Console.WriteLine("Invalid Value");
            }
            get
            {
                return designation;
            }
        }

        protected decimal basic;

        public override decimal Basic
        {
           
            set
            {
                if (value >= 10000 && value <= 500000)
                    basic = value;
                else
                    Console.WriteLine("Invalid basic salary");
            }
            get
            {

                return basic;

            }
        }



        public override decimal CalcNetSalaey()
        {
            decimal netsalary = basic + (decimal)2.0 - 1000;
            return netsalary;
        }

        public override void Insert()
        {
            Console.WriteLine("Inset IDfile");
        }

        public override void Update()
        {

            Console.WriteLine("update IDfile");
        }

        public override void Delete()
        {
            Console.WriteLine("delete IDfile");
        }
    }


    public class GeneralManager : Manager
    {
        public GeneralManager(string name, short deptno) : base(name, deptno)
        {

        }

        public string Perks {
            get; 
            set;
        }


        public override decimal Basic
        {
            get {
                return basic; 
            }
            set
            {
                if (value >= 10000 && value <= 500000)
                    basic = value;
                else
                    Console.WriteLine("Invalid basic salary");
            }
        }

        public override decimal CalcNetSalaey()
        {
            decimal netsalary = basic + (decimal)2.0 - 2500;
            return netsalary;
        }


        public override void Insert()
        {
            Console.WriteLine("Insert GeneralManager ");
        }
        public override void Update()
        {
            Console.WriteLine("Update GeneralManager ");
        }
        public override void Delete()
        {
            Console.WriteLine("Delete GeneralManager ");
        }

    }
    public class CEO : Employee
        {
            public CEO(string name, short deptno) : base(name, deptno) 
            {

            }

            private decimal basic;

            public override decimal Basic
            {
            get
            {
               return basic;
            }

                set
                {
                    if (value >= 50000 && value <= 1000000)
                        basic = value;
                    else
                        Console.WriteLine("Invalid basic salary for CEO");
                }
            }

            public sealed override decimal CalcNetSalaey()
            {
                return basic + 20000 - 1000;
            }

            public override void Insert()
            {
                Console.WriteLine("Insert CEO ");
            }
            public override void Update()
            {
                Console.WriteLine("Update CEO ");
            }
            public override void Delete()
            {
                Console.WriteLine("Delete CEO ");
            }
        }

}






